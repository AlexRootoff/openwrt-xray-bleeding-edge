diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..02952e7
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,2 @@
+.idea/
+main/main
diff --git a/app/web/client/client.go b/app/web/client/client.go
new file mode 100644
index 0000000..a12de47
--- /dev/null
+++ b/app/web/client/client.go
@@ -0,0 +1,194 @@
+package client
+
+import (
+	"context"
+	"encoding/json"
+	"fmt"
+	"log"
+
+	logCmd "github.com/xtls/xray-core/app/log/command"
+	proxymanCmd "github.com/xtls/xray-core/app/proxyman/command"
+	statsCmd "github.com/xtls/xray-core/app/stats/command"
+	"github.com/xtls/xray-core/common/protocol"
+	"github.com/xtls/xray-core/common/serial"
+	"github.com/xtls/xray-core/infra/conf"
+	"github.com/xtls/xray-core/proxy/vmess"
+	"google.golang.org/grpc"
+)
+
+var Client *ServiceClient
+
+type ServiceClient struct {
+	Address     string
+	Port        uint32
+	statClient  statsCmd.StatsServiceClient
+	proxyClient proxymanCmd.HandlerServiceClient
+	logClient   logCmd.LoggerServiceClient
+}
+
+func NewServiceClient(addr string, port uint32) *ServiceClient {
+	if addr == "" {
+		addr = "127.0.0.1"
+	}
+	if port == 0 {
+		return nil
+	}
+	cmdConn, err := grpc.Dial(fmt.Sprintf("%s:%d", addr, port), grpc.WithInsecure())
+	if err != nil {
+		newError(err)
+		return nil
+	}
+
+	svr := ServiceClient{Address: addr, Port: port,
+		statClient:  statsCmd.NewStatsServiceClient(cmdConn),
+		proxyClient: proxymanCmd.NewHandlerServiceClient(cmdConn),
+		logClient:   logCmd.NewLoggerServiceClient(cmdConn),
+	}
+	return &svr
+}
+
+func (h *ServiceClient) QueryStats(pattern string, reset bool) map[string]int64 {
+	sresp, err := h.statClient.QueryStats(context.Background(), &statsCmd.QueryStatsRequest{
+		Pattern: pattern,
+		Reset_:  reset,
+	})
+
+	result := make(map[string]int64)
+	if err != nil {
+		newError("failed to call grpc command: %v", err)
+	} else {
+		// log.Printf("%v", sresp)
+		for _, stat := range sresp.Stat {
+			result[stat.Name] = stat.Value
+		}
+	}
+
+	return result
+}
+
+func (h *ServiceClient) GetStats(name string, reset bool) (string, int64) {
+	sresp, err := h.statClient.GetStats(context.Background(), &statsCmd.GetStatsRequest{
+		Name:   name,
+		Reset_: reset,
+	})
+
+	if err != nil {
+		newError("%v", err)
+		return "", 0
+	}
+
+	return sresp.Stat.Name, sresp.Stat.Value
+}
+
+func (h *ServiceClient) GetStatsSys() *statsCmd.SysStatsResponse {
+	sresp, err := h.statClient.GetSysStats(context.Background(), &statsCmd.SysStatsRequest{})
+
+	if err != nil {
+		newError("%v", err)
+		return nil
+	}
+
+	return sresp
+}
+
+
+// AddUser ...
+//   Add a user to an inbound on the fly. The effect is not permentnent.
+func (h *ServiceClient) AddUser(inboundTag string, email string, level uint32, uuid string, alterID uint32) {
+	_, err := h.proxyClient.AlterInbound(context.Background(), &proxymanCmd.AlterInboundRequest{
+		Tag: inboundTag,
+		Operation: serial.ToTypedMessage(&proxymanCmd.AddUserOperation{
+			User: &protocol.User{
+				Level: level,
+				Email: email,
+				Account: serial.ToTypedMessage(&vmess.Account{
+					Id:               uuid,
+					AlterId:          alterID,
+					SecuritySettings: &protocol.SecurityConfig{Type: protocol.SecurityType_AUTO},
+				}),
+			},
+		}),
+	})
+
+	if err != nil {
+		newError("%v", err)
+	}
+}
+
+// RemoveUser ...
+//   Remove a user from an Inbound on the fly. The effect is not permentnent.
+func (h *ServiceClient) RemoveUser(inboundTag string, email string) {
+	_, err := h.proxyClient.AlterInbound(context.Background(), &proxymanCmd.AlterInboundRequest{
+		Tag: inboundTag,
+		Operation: serial.ToTypedMessage(&proxymanCmd.RemoveUserOperation{
+			Email: email,
+		}),
+	})
+
+	if err != nil {
+		newError("%v", err)
+	}
+}
+
+// RestartLogger
+// IDK if it will work :D
+func (h *ServiceClient) RestartLogger() {
+	_, err := h.logClient.RestartLogger(context.Background(), &logCmd.RestartLoggerRequest{})
+	if err != nil {
+		newError("%v", err)
+	}
+}
+
+func (h *ServiceClient) AddInbound(in []byte) {
+	var ins *conf.InboundDetourConfig
+	err := json.Unmarshal(in, &ins)
+	if err != nil {
+		log.Printf("failed to build conf: %s", err)
+	}
+	inbound, err := ins.Build()
+	if err != nil {
+		log.Printf("failed to build conf: %s", err)
+	}
+	_, err = h.proxyClient.AddInbound(context.Background(), &proxymanCmd.AddInboundRequest{
+		Inbound: inbound,
+	})
+	if err != nil {
+		newError("%v", err)
+	}
+}
+
+func (h *ServiceClient) AddOutbound(in []byte) {
+	var ins *conf.OutboundDetourConfig
+	err := json.Unmarshal(in, &ins)
+	if err != nil {
+		log.Printf("failed to build conf: %s", err)
+	}
+	outbound, err := ins.Build()
+	if err != nil {
+		log.Printf("failed to build conf: %s", err)
+	}
+	_, err = h.proxyClient.AddOutbound(context.Background(), &proxymanCmd.AddOutboundRequest{
+		Outbound: outbound,
+	})
+	if err != nil {
+		newError("%v", err)
+	}
+}
+
+func (h *ServiceClient) RemoveInbound(tag string) {
+	_, err := h.proxyClient.RemoveInbound(context.Background(), &proxymanCmd.RemoveInboundRequest{
+		Tag: tag,
+	})
+	if err != nil {
+		newError("%v", err)
+	}
+}
+
+func (h *ServiceClient) RemoveOutbound(tag string) {
+	_, err := h.proxyClient.RemoveOutbound(context.Background(), &proxymanCmd.RemoveOutboundRequest{
+		Tag: tag,
+	})
+	if err != nil {
+		newError("%v", err)
+	}
+}
diff --git a/app/web/client/errors.generated.go b/app/web/client/errors.generated.go
new file mode 100644
index 0000000..1ed9507
--- /dev/null
+++ b/app/web/client/errors.generated.go
@@ -0,0 +1,9 @@
+package client
+
+import "github.com/xtls/xray-core/common/errors"
+
+type errPathObjHolder struct{}
+
+func newError(values ...interface{}) *errors.Error {
+	return errors.New(values...).WithPathObj(errPathObjHolder{})
+}
diff --git a/app/web/config/config.pb.go b/app/web/config/config.pb.go
new file mode 100644
index 0000000..b516639
--- /dev/null
+++ b/app/web/config/config.pb.go
@@ -0,0 +1,330 @@
+// Code generated by protoc-gen-go. DO NOT EDIT.
+// versions:
+// 	protoc-gen-go v1.25.0
+// 	protoc        v3.9.2
+// source: config.proto
+
+package config
+
+import (
+	proto "github.com/golang/protobuf/proto"
+	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
+	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
+	reflect "reflect"
+	sync "sync"
+)
+
+const (
+	// Verify that this generated code is sufficiently up-to-date.
+	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
+	// Verify that runtime/protoimpl is sufficiently up-to-date.
+	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
+)
+
+// This is a compile-time assertion that a sufficiently up-to-date version
+// of the legacy proto package is being used.
+const _ = proto.ProtoPackageIsVersion4
+
+// Config is the settings for Web;
+type Config struct {
+	state         protoimpl.MessageState
+	sizeCache     protoimpl.SizeCache
+	unknownFields protoimpl.UnknownFields
+
+	// Tag of the outbound handler that handles Webful API http connections.
+	Tag    string    `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
+	Api    *Api      `protobuf:"bytes,2,opt,name=api,proto3" json:"api,omitempty"`
+	Pprof  bool      `protobuf:"varint,3,opt,name=pprof,proto3" json:"pprof,omitempty"`
+	Static []*Static `protobuf:"bytes,4,rep,name=static,proto3" json:"static,omitempty"`
+}
+
+func (x *Config) Reset() {
+	*x = Config{}
+	if protoimpl.UnsafeEnabled {
+		mi := &file_config_proto_msgTypes[0]
+		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
+		ms.StoreMessageInfo(mi)
+	}
+}
+
+func (x *Config) String() string {
+	return protoimpl.X.MessageStringOf(x)
+}
+
+func (*Config) ProtoMessage() {}
+
+func (x *Config) ProtoReflect() protoreflect.Message {
+	mi := &file_config_proto_msgTypes[0]
+	if protoimpl.UnsafeEnabled && x != nil {
+		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
+		if ms.LoadMessageInfo() == nil {
+			ms.StoreMessageInfo(mi)
+		}
+		return ms
+	}
+	return mi.MessageOf(x)
+}
+
+// Deprecated: Use Config.ProtoReflect.Descriptor instead.
+func (*Config) Descriptor() ([]byte, []int) {
+	return file_config_proto_rawDescGZIP(), []int{0}
+}
+
+func (x *Config) GetTag() string {
+	if x != nil {
+		return x.Tag
+	}
+	return ""
+}
+
+func (x *Config) GetApi() *Api {
+	if x != nil {
+		return x.Api
+	}
+	return nil
+}
+
+func (x *Config) GetPprof() bool {
+	if x != nil {
+		return x.Pprof
+	}
+	return false
+}
+
+func (x *Config) GetStatic() []*Static {
+	if x != nil {
+		return x.Static
+	}
+	return nil
+}
+
+type Api struct {
+	state         protoimpl.MessageState
+	sizeCache     protoimpl.SizeCache
+	unknownFields protoimpl.UnknownFields
+
+	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
+	Port    uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
+}
+
+func (x *Api) Reset() {
+	*x = Api{}
+	if protoimpl.UnsafeEnabled {
+		mi := &file_config_proto_msgTypes[1]
+		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
+		ms.StoreMessageInfo(mi)
+	}
+}
+
+func (x *Api) String() string {
+	return protoimpl.X.MessageStringOf(x)
+}
+
+func (*Api) ProtoMessage() {}
+
+func (x *Api) ProtoReflect() protoreflect.Message {
+	mi := &file_config_proto_msgTypes[1]
+	if protoimpl.UnsafeEnabled && x != nil {
+		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
+		if ms.LoadMessageInfo() == nil {
+			ms.StoreMessageInfo(mi)
+		}
+		return ms
+	}
+	return mi.MessageOf(x)
+}
+
+// Deprecated: Use Api.ProtoReflect.Descriptor instead.
+func (*Api) Descriptor() ([]byte, []int) {
+	return file_config_proto_rawDescGZIP(), []int{1}
+}
+
+func (x *Api) GetAddress() string {
+	if x != nil {
+		return x.Address
+	}
+	return ""
+}
+
+func (x *Api) GetPort() uint32 {
+	if x != nil {
+		return x.Port
+	}
+	return 0
+}
+
+type Static struct {
+	state         protoimpl.MessageState
+	sizeCache     protoimpl.SizeCache
+	unknownFields protoimpl.UnknownFields
+
+	FilePath string `protobuf:"bytes,1,opt,name=filePath,proto3" json:"filePath,omitempty"`
+	Uri      string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
+}
+
+func (x *Static) Reset() {
+	*x = Static{}
+	if protoimpl.UnsafeEnabled {
+		mi := &file_config_proto_msgTypes[2]
+		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
+		ms.StoreMessageInfo(mi)
+	}
+}
+
+func (x *Static) String() string {
+	return protoimpl.X.MessageStringOf(x)
+}
+
+func (*Static) ProtoMessage() {}
+
+func (x *Static) ProtoReflect() protoreflect.Message {
+	mi := &file_config_proto_msgTypes[2]
+	if protoimpl.UnsafeEnabled && x != nil {
+		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
+		if ms.LoadMessageInfo() == nil {
+			ms.StoreMessageInfo(mi)
+		}
+		return ms
+	}
+	return mi.MessageOf(x)
+}
+
+// Deprecated: Use Static.ProtoReflect.Descriptor instead.
+func (*Static) Descriptor() ([]byte, []int) {
+	return file_config_proto_rawDescGZIP(), []int{2}
+}
+
+func (x *Static) GetFilePath() string {
+	if x != nil {
+		return x.FilePath
+	}
+	return ""
+}
+
+func (x *Static) GetUri() string {
+	if x != nil {
+		return x.Uri
+	}
+	return ""
+}
+
+var File_config_proto protoreflect.FileDescriptor
+
+var file_config_proto_rawDesc = []byte{
+	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13,
+	0x78, 0x72, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x63, 0x6f, 0x6e,
+	0x66, 0x69, 0x67, 0x22, 0x91, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x10,
+	0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67,
+	0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
+	0x78, 0x72, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x63, 0x6f, 0x6e,
+	0x66, 0x69, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x14, 0x0a, 0x05,
+	0x70, 0x70, 0x72, 0x6f, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x70, 0x70, 0x72,
+	0x6f, 0x66, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x18, 0x04, 0x20, 0x03,
+	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x78, 0x72, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x77, 0x65,
+	0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52,
+	0x06, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x22, 0x33, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x12, 0x18,
+	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
+	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
+	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x36, 0x0a, 0x06,
+	0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61,
+	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61,
+	0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
+	0x03, 0x75, 0x72, 0x69, 0x42, 0x5b, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x72, 0x61, 0x79,
+	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50,
+	0x01, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x78, 0x74,
+	0x6c, 0x73, 0x2f, 0x78, 0x72, 0x61, 0x79, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x70,
+	0x2f, 0x77, 0x65, 0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0xaa, 0x02, 0x13, 0x58, 0x72,
+	0x61, 0x79, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x57, 0x65, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
+	0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
+}
+
+var (
+	file_config_proto_rawDescOnce sync.Once
+	file_config_proto_rawDescData = file_config_proto_rawDesc
+)
+
+func file_config_proto_rawDescGZIP() []byte {
+	file_config_proto_rawDescOnce.Do(func() {
+		file_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_config_proto_rawDescData)
+	})
+	return file_config_proto_rawDescData
+}
+
+var file_config_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
+var file_config_proto_goTypes = []interface{}{
+	(*Config)(nil), // 0: xray.app.web.config.Config
+	(*Api)(nil),    // 1: xray.app.web.config.api
+	(*Static)(nil), // 2: xray.app.web.config.static
+}
+var file_config_proto_depIdxs = []int32{
+	1, // 0: xray.app.web.config.Config.api:type_name -> xray.app.web.config.api
+	2, // 1: xray.app.web.config.Config.static:type_name -> xray.app.web.config.static
+	2, // [2:2] is the sub-list for method output_type
+	2, // [2:2] is the sub-list for method input_type
+	2, // [2:2] is the sub-list for extension type_name
+	2, // [2:2] is the sub-list for extension extendee
+	0, // [0:2] is the sub-list for field type_name
+}
+
+func init() { file_config_proto_init() }
+func file_config_proto_init() {
+	if File_config_proto != nil {
+		return
+	}
+	if !protoimpl.UnsafeEnabled {
+		file_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
+			switch v := v.(*Config); i {
+			case 0:
+				return &v.state
+			case 1:
+				return &v.sizeCache
+			case 2:
+				return &v.unknownFields
+			default:
+				return nil
+			}
+		}
+		file_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
+			switch v := v.(*Api); i {
+			case 0:
+				return &v.state
+			case 1:
+				return &v.sizeCache
+			case 2:
+				return &v.unknownFields
+			default:
+				return nil
+			}
+		}
+		file_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
+			switch v := v.(*Static); i {
+			case 0:
+				return &v.state
+			case 1:
+				return &v.sizeCache
+			case 2:
+				return &v.unknownFields
+			default:
+				return nil
+			}
+		}
+	}
+	type x struct{}
+	out := protoimpl.TypeBuilder{
+		File: protoimpl.DescBuilder{
+			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
+			RawDescriptor: file_config_proto_rawDesc,
+			NumEnums:      0,
+			NumMessages:   3,
+			NumExtensions: 0,
+			NumServices:   0,
+		},
+		GoTypes:           file_config_proto_goTypes,
+		DependencyIndexes: file_config_proto_depIdxs,
+		MessageInfos:      file_config_proto_msgTypes,
+	}.Build()
+	File_config_proto = out.File
+	file_config_proto_rawDesc = nil
+	file_config_proto_goTypes = nil
+	file_config_proto_depIdxs = nil
+}
diff --git a/app/web/config/config.proto b/app/web/config/config.proto
new file mode 100644
index 0000000..bef72c6
--- /dev/null
+++ b/app/web/config/config.proto
@@ -0,0 +1,27 @@
+syntax = "proto3";
+
+package xray.app.web.config;
+option csharp_namespace = "Xray.App.Web.Config";
+option go_package = "github.com/xtls/xray-core/app/web/config";
+option java_package = "com.xray.app.web.config";
+option java_multiple_files = true;
+
+// Config is the settings for Web;
+message Config {
+    // Tag of the outbound handler that handles Webful API http connections.
+    string tag = 1;
+    api api = 2;
+    bool pprof = 3;
+    repeated static static = 4;
+}
+
+message api {
+    string address = 1;
+    uint32 port = 2;
+}
+
+
+message static {
+    string filePath = 1;
+    string uri = 2;
+}
diff --git a/app/web/errors.generated.go b/app/web/errors.generated.go
new file mode 100644
index 0000000..4225409
--- /dev/null
+++ b/app/web/errors.generated.go
@@ -0,0 +1,9 @@
+package web
+
+import "github.com/xtls/xray-core/common/errors"
+
+type errPathObjHolder struct{}
+
+func newError(values ...interface{}) *errors.Error {
+	return errors.New(values...).WithPathObj(errPathObjHolder{})
+}
diff --git a/app/web/handler/errors.generated.go b/app/web/handler/errors.generated.go
new file mode 100644
index 0000000..711efcf
--- /dev/null
+++ b/app/web/handler/errors.generated.go
@@ -0,0 +1,9 @@
+package handler
+
+import "github.com/xtls/xray-core/common/errors"
+
+type errPathObjHolder struct{}
+
+func newError(values ...interface{}) *errors.Error {
+	return errors.New(values...).WithPathObj(errPathObjHolder{})
+}
diff --git a/app/web/handler/inbound.go b/app/web/handler/inbound.go
new file mode 100644
index 0000000..c3ae768
--- /dev/null
+++ b/app/web/handler/inbound.go
@@ -0,0 +1,30 @@
+package handler
+
+import (
+	"net/http"
+
+	"github.com/julienschmidt/httprouter"
+	"github.com/xtls/xray-core/app/web/client"
+	"github.com/xtls/xray-core/common/log"
+)
+
+//"Content-Type: application/json"
+func AddInboundHandler(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
+	res, err, _ := Convert(r)
+	if err != nil {
+		newError(err)
+		return
+	}
+	client.Client.AddInbound(res)
+}
+
+func RemoveInboundHandler(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
+	data := ps.ByName("tag")
+	log.Record(&log.AccessMessage{
+		From:   "Web",
+		To:     "RemoveInboundHandler",
+		Status: log.AccessAccepted,
+		Detour: data,
+	})
+	client.Client.RemoveInbound(data)
+}
diff --git a/app/web/handler/outbound.go b/app/web/handler/outbound.go
new file mode 100644
index 0000000..8193f48
--- /dev/null
+++ b/app/web/handler/outbound.go
@@ -0,0 +1,29 @@
+package handler
+
+import (
+	"net/http"
+
+	"github.com/julienschmidt/httprouter"
+	"github.com/xtls/xray-core/app/web/client"
+	"github.com/xtls/xray-core/common/log"
+)
+
+func AddOutboundHandler(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
+	res, err, _ := Convert(r)
+	if err != nil {
+		newError(err)
+		return
+	}
+	client.Client.AddOutbound(res)
+}
+
+func RemoveOutboundHandler(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
+	data := ps.ByName("tag")
+	log.Record(&log.AccessMessage{
+		From:   "Web",
+		To:     "RemoveOutboundHandler",
+		Status: log.AccessAccepted,
+		Detour: data,
+	})
+	client.Client.RemoveOutbound(data)
+}
diff --git a/app/web/handler/stats.go b/app/web/handler/stats.go
new file mode 100644
index 0000000..26889d3
--- /dev/null
+++ b/app/web/handler/stats.go
@@ -0,0 +1,60 @@
+package handler
+
+import (
+	"bytes"
+	"encoding/json"
+	"fmt"
+	"net/http"
+	"time"
+
+	"github.com/julienschmidt/httprouter"
+	"github.com/xtls/xray-core/app/web/client"
+)
+
+var boot time.Time
+
+func init() {
+	boot = time.Now()
+}
+
+func GetSysStatsHandler(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
+	response := client.Client.GetStatsSys()
+	if response == nil {
+		fmt.Fprintf(w, "{}")
+	}
+	ret, err := json.Marshal(response)
+	if err != nil {
+		newError(err)
+	} else {
+		fmt.Fprintf(w, "%s\n", string(ret))
+	}
+}
+
+func GetStatsHandler(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
+	data := ps.ByName("name")
+	_, value := client.Client.GetStats(data, false)
+	fmt.Fprintf(w, "%s\n", fmt.Sprintf("%v", value))
+}
+
+func QueryStatsHandler(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
+	data := ps.ByName("pattern")
+	pattern := client.Client.QueryStats(data, false)
+	sub := make(map[string]interface{})
+	for key, val := range pattern {
+		sub[key] = val
+	}
+	var stat []map[string]interface{}
+	stat = append(stat, sub)
+
+	buf := new(bytes.Buffer)
+	enc := json.NewEncoder(buf)
+	enc.SetEscapeHTML(false)
+
+	err := enc.Encode(&stat)
+	if err != nil {
+		newError("failed to convert json")
+		return
+	}
+	//working
+	fmt.Fprintf(w, "%s\n", buf.String())
+}
diff --git a/app/web/handler/utils.go b/app/web/handler/utils.go
new file mode 100644
index 0000000..7fdb5cc
--- /dev/null
+++ b/app/web/handler/utils.go
@@ -0,0 +1,27 @@
+package handler
+
+import (
+	"encoding/json"
+	"log"
+	"net/http"
+)
+
+func Convert(r *http.Request) ([]byte, error, map[string]interface{}) {
+	err := r.ParseForm()
+	if err != nil {
+		log.Println(err)
+		return nil, err, nil
+	}
+	decoder := json.NewDecoder(r.Body)
+	var params map[string]interface{}
+	if err := decoder.Decode(&params); err != nil {
+		log.Println(err)
+		return nil, err, nil
+	}
+	res, err := json.Marshal(params)
+	if err != nil {
+		log.Println(err)
+		return nil, err, nil
+	}
+	return res, nil, params
+}
diff --git a/app/web/outbound.go b/app/web/outbound.go
new file mode 100644
index 0000000..37ebd12
--- /dev/null
+++ b/app/web/outbound.go
@@ -0,0 +1,109 @@
+package web
+
+import (
+	"context"
+	"sync"
+
+	"github.com/xtls/xray-core/common"
+	"github.com/xtls/xray-core/common/net"
+	"github.com/xtls/xray-core/common/net/cnc"
+	"github.com/xtls/xray-core/common/signal/done"
+	"github.com/xtls/xray-core/transport"
+)
+
+// OutboundListener is a net.Listener for listening http connections.
+type OutboundListener struct {
+	buffer chan net.Conn
+	done   *done.Instance
+}
+
+func (l *OutboundListener) add(conn net.Conn) {
+	select {
+	case l.buffer <- conn:
+	case <-l.done.Wait():
+		conn.Close()
+	default:
+		conn.Close()
+	}
+}
+
+// Accept implements net.Listener.
+func (l *OutboundListener) Accept() (net.Conn, error) {
+	select {
+	case <-l.done.Wait():
+		return nil, newError("listen closed")
+	case c := <-l.buffer:
+		return c, nil
+	}
+}
+
+// Close implement net.Listener.
+func (l *OutboundListener) Close() error {
+	common.Must(l.done.Close())
+L:
+	for {
+		select {
+		case c := <-l.buffer:
+			c.Close()
+		default:
+			break L
+		}
+	}
+	return nil
+}
+
+// Addr implements net.Listener.
+func (l *OutboundListener) Addr() net.Addr {
+	return &net.TCPAddr{
+		IP:   net.IP{0, 0, 0, 0},
+		Port: 0,
+	}
+}
+
+// Outbound is a outbound.Handler that handles http connections.
+type Outbound struct {
+	tag      string
+	listener *OutboundListener
+	access   sync.RWMutex
+	closed   bool
+}
+
+// Dispatch implements outbound.Handler.
+func (co *Outbound) Dispatch(ctx context.Context, link *transport.Link) {
+	co.access.RLock()
+
+	if co.closed {
+		common.Interrupt(link.Reader)
+		common.Interrupt(link.Writer)
+		co.access.RUnlock()
+		return
+	}
+
+	closeSignal := done.New()
+	c := cnc.NewConnection(cnc.ConnectionInputMulti(link.Writer), cnc.ConnectionOutputMulti(link.Reader), cnc.ConnectionOnClose(closeSignal))
+	co.listener.add(c)
+	co.access.RUnlock()
+	<-closeSignal.Wait()
+}
+
+// Tag implements outbound.Handler.
+func (co *Outbound) Tag() string {
+	return co.tag
+}
+
+// Start implements common.Runnable.
+func (co *Outbound) Start() error {
+	co.access.Lock()
+	co.closed = false
+	co.access.Unlock()
+	return nil
+}
+
+// Close implements common.Closable.
+func (co *Outbound) Close() error {
+	co.access.Lock()
+	defer co.access.Unlock()
+
+	co.closed = true
+	return co.listener.Close()
+}
diff --git a/app/web/router.go b/app/web/router.go
new file mode 100644
index 0000000..9d519cb
--- /dev/null
+++ b/app/web/router.go
@@ -0,0 +1,52 @@
+package web
+
+import (
+	"fmt"
+	"net/http"
+
+	"github.com/julienschmidt/httprouter"
+	"github.com/xtls/xray-core/app/web/client"
+	"github.com/xtls/xray-core/app/web/handler"
+	"github.com/xtls/xray-core/core"
+)
+
+func Default(config *WebHandler) *httprouter.Router {
+	router := httprouter.New()
+
+	if config.api.port != 0 {
+		client.Client = client.NewServiceClient(config.api.address, config.api.port)
+		router.GET("/api/v1/statssys", handler.GetSysStatsHandler)
+		router.GET("/api/v1/statsquery", handler.QueryStatsHandler)
+		router.GET("/api/v1/statsquery/:pattern", handler.QueryStatsHandler)
+		router.GET("/api/v1/stats", handler.GetStatsHandler)
+		router.GET("/api/v1/stats/:name", handler.GetStatsHandler)
+		router.DELETE("/api/v1/inbounds/:tag", handler.RemoveInboundHandler)
+		router.POST("/api/v1/inbounds", handler.AddInboundHandler)
+		router.DELETE("/api/v1/outbounds/:tag", handler.RemoveOutboundHandler)
+		router.POST("/api/v1/outbounds", handler.AddOutboundHandler)
+	}
+
+	if config.pprof {
+		router.Handler(http.MethodGet, "/debug/pprof/*item", http.DefaultServeMux)
+	}
+
+	if config.static != nil {
+		for _, s := range config.static {
+			if s.uri == "/" {
+				router.NotFound = http.FileServer(http.Dir(s.filePath))
+			} else {
+				router.ServeFiles(s.uri+"/*filepath", http.Dir(s.filePath))
+			}
+		}
+	} else {
+		router.GET("/", DefaultHandler)
+	}
+
+	return router
+}
+
+func DefaultHandler(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
+	for _, s := range core.VersionStatement() {
+		fmt.Fprintf(w, "%s\n", s)
+	}
+}
diff --git a/app/web/web.go b/app/web/web.go
new file mode 100644
index 0000000..8992306
--- /dev/null
+++ b/app/web/web.go
@@ -0,0 +1,92 @@
+package web
+
+import (
+	"context"
+	"net/http"
+	_ "net/http/pprof"
+
+	"github.com/xtls/xray-core/app/web/config"
+	"github.com/xtls/xray-core/common"
+	"github.com/xtls/xray-core/common/net"
+	"github.com/xtls/xray-core/common/signal/done"
+	"github.com/xtls/xray-core/core"
+	"github.com/xtls/xray-core/features/outbound"
+)
+
+type WebHandler struct {
+	ohm    outbound.Manager
+	tag    string
+	api    Api
+	pprof  bool
+	static []Static
+}
+
+type Api struct {
+	address string
+	port    uint32
+}
+
+type Static struct {
+	filePath string
+	uri      string
+}
+
+// New
+func NewWebHandler(ctx context.Context, config *config.Config) (*WebHandler, error) {
+	c := &WebHandler{
+		tag: config.Tag,
+		api: Api{
+			address: config.Api.Address,
+			port:    config.Api.Port,
+		},
+		pprof: config.Pprof,
+	}
+
+	for _, s := range config.Static {
+		c.static = append(c.static, Static{
+			filePath: s.FilePath,
+			uri:      s.Uri,
+		})
+	}
+
+	common.Must(core.RequireFeatures(ctx, func(om outbound.Manager) {
+		c.ohm = om
+	}))
+	return c, nil
+}
+
+func (r *WebHandler) Type() interface{} {
+	return (*WebHandler)(nil)
+}
+
+func (r *WebHandler) Start() error {
+	listener := &OutboundListener{
+		buffer: make(chan net.Conn, 4),
+		done:   done.New(),
+	}
+
+	go func() {
+		if err := http.Serve(listener, Default(r)); err != nil {
+			newError("failed to start Web server").Base(err).AtError().WriteToLog()
+		}
+	}()
+
+	if err := r.ohm.RemoveHandler(context.Background(), r.tag); err != nil {
+		newError("failed to remove existing handler").WriteToLog()
+	}
+
+	return r.ohm.AddHandler(context.Background(), &Outbound{
+		tag:      r.tag,
+		listener: listener,
+	})
+}
+
+func (r *WebHandler) Close() error {
+	return nil
+}
+
+func init() {
+	common.Must(common.RegisterConfig((*config.Config)(nil), func(ctx context.Context, cfg interface{}) (interface{}, error) {
+		return NewWebHandler(ctx, cfg.(*config.Config))
+	}))
+}
diff --git a/go.mod b/go.mod
index 4c02282..7d5c36c 100644
--- a/go.mod
+++ b/go.mod
@@ -8,20 +8,24 @@ require (
 	github.com/golang/protobuf v1.5.2
 	github.com/google/go-cmp v0.5.5
 	github.com/gorilla/websocket v1.4.2
-	github.com/lucas-clemente/quic-go v0.20.0
+	github.com/julienschmidt/httprouter v1.3.0
+	github.com/lucas-clemente/quic-go v0.20.1
 	github.com/miekg/dns v1.1.41
-	github.com/pelletier/go-toml v1.8.1
+	github.com/pelletier/go-toml v1.9.0
 	github.com/pires/go-proxyproto v0.5.0
 	github.com/refraction-networking/utls v0.0.0-20201210053706-2179f286686b
 	github.com/seiflotfy/cuckoofilter v0.0.0-20201222105146-bc6005554a0c
 	github.com/stretchr/testify v1.7.0
 	github.com/xtls/go v0.0.0-20201118062508-3632bf3b7499
-	go.starlark.net v0.0.0-20210312235212-74c10e2c17dc
+	go.starlark.net v0.0.0-20210406145628-7a1108eaa012
 	golang.org/x/crypto v0.0.0-20210322153248-0c34fe9e7dc2
-	golang.org/x/net v0.0.0-20210330230544-e57232859fb2
+	golang.org/x/net v0.0.0-20210405180319-a5a99cb37ef4
 	golang.org/x/sync v0.0.0-20210220032951-036812b2e83c
-	golang.org/x/sys v0.0.0-20210330210617-4fbd30eecc44
+	golang.org/x/sys v0.0.0-20210403161142-5e06dd20ab57
+	golang.org/x/text v0.3.6 // indirect
+	google.golang.org/genproto v0.0.0-20210406143921-e86de6bf7a46 // indirect
 	google.golang.org/grpc v1.36.1
 	google.golang.org/protobuf v1.26.0
+	gopkg.in/yaml.v2 v2.4.0 // indirect
 	h12.io/socks v1.0.2
 )
diff --git a/go.sum b/go.sum
index 2b074e1..459a4bd 100644
--- a/go.sum
+++ b/go.sum
@@ -89,6 +89,8 @@ github.com/hpcloud/tail v1.0.0/go.mod h1:ab1qPbhIpdTxEkNHXyeSf5vhxWSCs/tWer42PpO
 github.com/jellevandenhooff/dkim v0.0.0-20150330215556-f50fe3d243e1/go.mod h1:E0B/fFc00Y+Rasa88328GlI/XbtyysCtTHZS8h7IrBU=
 github.com/json-iterator/go v1.1.6/go.mod h1:+SdeFBvtyEkXs7REEP0seUULqWtbJapLOCVDaaPEHmU=
 github.com/jstemmer/go-junit-report v0.0.0-20190106144839-af01ea7f8024/go.mod h1:6v2b51hI/fHJwM22ozAgKL4VKDeJcHhJFhtBdhmNjmU=
+github.com/julienschmidt/httprouter v1.3.0 h1:U0609e9tgbseu3rBINet9P48AI/D3oJs4dN7jwJOQ1U=
+github.com/julienschmidt/httprouter v1.3.0/go.mod h1:JR6WtHb+2LUe8TCKY3cZOxFyyO8IZAc4RVcycCCAKdM=
 github.com/kisielk/gotool v1.0.0/go.mod h1:XhKaO+MFFWcvkIS/tQcRk01m1F5IRFswLeQ+oQHNcck=
 github.com/kr/pretty v0.1.0 h1:L/CwN0zerZDmRFUapSPitk6f+Q3+0za1rQkzVuMiMFI=
 github.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=
@@ -96,8 +98,8 @@ github.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=
 github.com/kr/pty v1.1.3/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=
 github.com/kr/text v0.1.0 h1:45sCR5RtlFHMR4UwH9sdQ5TC8v0qDQCHnXt+kaKSTVE=
 github.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=
-github.com/lucas-clemente/quic-go v0.20.0 h1:FSU3YN5VnLafHR27Ejs1r1CYMS7XMyIVDzRewkDLNBw=
-github.com/lucas-clemente/quic-go v0.20.0/go.mod h1:fZq/HUDIM+mW6X6wtzORjC0E/WDBMKe5Hf9bgjISwLk=
+github.com/lucas-clemente/quic-go v0.20.1 h1:hb5m76V8QS/8Nw/suHvXqo3BMHAozvIkcnzpJdpanSk=
+github.com/lucas-clemente/quic-go v0.20.1/go.mod h1:fZq/HUDIM+mW6X6wtzORjC0E/WDBMKe5Hf9bgjISwLk=
 github.com/lunixbochs/vtclean v1.0.0/go.mod h1:pHhQNgMf3btfWnGBVipUOjRYhoOsdGqdm/+2c2E2WMI=
 github.com/mailru/easyjson v0.0.0-20190312143242-1de009706dbe/go.mod h1:C1wdFJiN94OJF2b5HbByQZoLdCWB1Yqtg26g4irojpc=
 github.com/marten-seemann/qpack v0.2.1/go.mod h1:F7Gl5L1jIgN1D11ucXefiuJS9UMVP2opoCp2jDKb7wc=
@@ -123,8 +125,8 @@ github.com/onsi/gomega v1.7.1/go.mod h1:XdKZgCCFLUoM/7CFJVPcG8C1xQ1AJ0vpAezJrB7J
 github.com/onsi/gomega v1.10.1 h1:o0+MgICZLuZ7xjH7Vx6zS/zcu93/BEp1VwkIW1mEXCE=
 github.com/onsi/gomega v1.10.1/go.mod h1:iN09h71vgCQne3DLsj+A5owkum+a2tYe+TOCB1ybHNo=
 github.com/openzipkin/zipkin-go v0.1.1/go.mod h1:NtoC/o8u3JlF1lSlyPNswIbeQH9bJTmOf0Erfk+hxe8=
-github.com/pelletier/go-toml v1.8.1 h1:1Nf83orprkJyknT6h7zbuEGUEjcyVlCxSUGTENmNCRM=
-github.com/pelletier/go-toml v1.8.1/go.mod h1:T2/BmBdy8dvIRq1a/8aqjN41wvWlN4lrapLU/GW4pbc=
+github.com/pelletier/go-toml v1.9.0 h1:NOd0BRdOKpPf0SxkL3HxSQOG7rNh+4kl6PHcBPFs7Q0=
+github.com/pelletier/go-toml v1.9.0/go.mod h1:u1nR/EPcESfeI/szUZKdtJ0xRNbUoANCkoOuaOx1Y+c=
 github.com/phayes/freeport v0.0.0-20180830031419-95f893ade6f2 h1:JhzVVoYvbOACxoUmOs6V/G4D5nPVUW73rKvXxP4XUJc=
 github.com/phayes/freeport v0.0.0-20180830031419-95f893ade6f2/go.mod h1:iIss55rKnNBTvrwdmkUpLnDpZoAHvWaiq5+iMmen4AE=
 github.com/pires/go-proxyproto v0.5.0 h1:A4Jv4ZCaV3AFJeGh5mGwkz4iuWUYMlQ7IoO/GTuSuLo=
@@ -178,9 +180,10 @@ github.com/viant/assertly v0.4.8/go.mod h1:aGifi++jvCrUaklKEKT0BU95igDNaqkvz+49u
 github.com/viant/toolbox v0.24.0/go.mod h1:OxMCG57V0PXuIP2HNQrtJf2CjqdmbrOx5EkMILuUhzM=
 github.com/xtls/go v0.0.0-20201118062508-3632bf3b7499 h1:QHESTXtfgc1ABV+ArlbPVqUx9Ht5I0dDkYhxYoXFxNo=
 github.com/xtls/go v0.0.0-20201118062508-3632bf3b7499/go.mod h1:5TB2+k58gx4A4g2Nf5miSHNDF6CuAzHKpWBooLAshTs=
+github.com/yuin/goldmark v1.2.1/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=
 go.opencensus.io v0.18.0/go.mod h1:vKdFvxhtzZ9onBp9VKHK8z/sRpBMnKAsufL7wlDrCOA=
-go.starlark.net v0.0.0-20210312235212-74c10e2c17dc h1:pVkptfeOTFfx+zXZo7HEHN3d5LmhatBFvHdm/f2QnpY=
-go.starlark.net v0.0.0-20210312235212-74c10e2c17dc/go.mod h1:t3mmBBPzAVvK0L0n1drDmrQsJ8FoIx4INCqVMTr/Zo0=
+go.starlark.net v0.0.0-20210406145628-7a1108eaa012 h1:4RGobP/iq7S22H0Bb92OEt+M8/cfBQnW+T+a2MC0sQo=
+go.starlark.net v0.0.0-20210406145628-7a1108eaa012/go.mod h1:t3mmBBPzAVvK0L0n1drDmrQsJ8FoIx4INCqVMTr/Zo0=
 go4.org v0.0.0-20180809161055-417644f6feb5/go.mod h1:MkTOUMDaeVYJUOUsaDXIhWPZYa1yOyC1qaOBpL57BhE=
 golang.org/x/build v0.0.0-20190111050920-041ab4dc3f9d/go.mod h1:OWs+y06UdEOHN4y+MfF/py+xQ/tYqIWW03b70/CG9Rw=
 golang.org/x/crypto v0.0.0-20181030102418-4d3f4d9ffa16/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=
@@ -196,6 +199,8 @@ golang.org/x/lint v0.0.0-20180702182130-06c8688daad7/go.mod h1:UVdnD1Gm6xHRNCYTk
 golang.org/x/lint v0.0.0-20181026193005-c67002cb31c3/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=
 golang.org/x/lint v0.0.0-20190227174305-5b3e6a55c961/go.mod h1:wehouNa3lNwaWXcvxsM5YxQ5yQlVC4a0KAMCusXpPoU=
 golang.org/x/lint v0.0.0-20190313153728-d0100b6bd8b3/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=
+golang.org/x/lint v0.0.0-20201208152925-83fdc39ff7b5/go.mod h1:3xt1FjdF8hUf6vQPIChWIBhFzV8gjjsPE/fR3IyQdNY=
+golang.org/x/mod v0.1.1-0.20191105210325-c90efee705ee/go.mod h1:QqPTAvyqsEbceGzBzNggFXnrqF1CaUcvgkdR5Ot7KZg=
 golang.org/x/mod v0.3.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=
 golang.org/x/net v0.0.0-20180724234803-3673e40ba225/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
 golang.org/x/net v0.0.0-20180826012351-8a410e7b638d/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
@@ -210,9 +215,11 @@ golang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn
 golang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
 golang.org/x/net v0.0.0-20200520004742-59133d7f0dd7/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=
 golang.org/x/net v0.0.0-20200707034311-ab3426394381/go.mod h1:/O7V0waA8r7cgGh81Ro3o1hOxt32SMVPicZroKQ2sZA=
+golang.org/x/net v0.0.0-20201021035429-f5854403a974/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=
 golang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=
-golang.org/x/net v0.0.0-20210330230544-e57232859fb2 h1:nGCZOty+lVDsc4H2qPFksI5Se296+V+GhMiL/TzmYNk=
-golang.org/x/net v0.0.0-20210330230544-e57232859fb2/go.mod h1:p54w0d4576C0XHj96bSt6lcn1PtDYWL6XObtHCRCNQM=
+golang.org/x/net v0.0.0-20210316092652-d523dce5a7f4/go.mod h1:RBQZq4jEuRlivfhVLdyRGr576XBO4/greRjx4P4O3yc=
+golang.org/x/net v0.0.0-20210405180319-a5a99cb37ef4 h1:4nGaVu0QrbjT/AK2PRLuQfQuh6DJve+pELhqTdAj3x0=
+golang.org/x/net v0.0.0-20210405180319-a5a99cb37ef4/go.mod h1:p54w0d4576C0XHj96bSt6lcn1PtDYWL6XObtHCRCNQM=
 golang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=
 golang.org/x/oauth2 v0.0.0-20181017192945-9dcd33a902f4/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=
 golang.org/x/oauth2 v0.0.0-20181203162652-d668ce993890/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=
@@ -224,6 +231,7 @@ golang.org/x/sync v0.0.0-20181221193216-37e7f081c4d4/go.mod h1:RxMgew5VJxzue5/jJ
 golang.org/x/sync v0.0.0-20190227155943-e225da77a7e6/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20190911185100-cd5d95a43a6e/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
+golang.org/x/sync v0.0.0-20201020160332-67f06af15bc9/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20210220032951-036812b2e83c h1:5KslGYwFpkhGh+Q16bwMP3cOontH8FOep7tGV86Y7SQ=
 golang.org/x/sync v0.0.0-20210220032951-036812b2e83c/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sys v0.0.0-20180830151530-49385e6e1522/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
@@ -241,15 +249,21 @@ golang.org/x/sys v0.0.0-20200519105757-fe76b779f299/go.mod h1:h1NjWce9XRLGQEsW7w
 golang.org/x/sys v0.0.0-20200930185726-fdedc70b468f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20201231184435-2d18734c6014/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20210119212857-b64e53b001e4/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20210303074136-134d130e1a04/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20210330210617-4fbd30eecc44 h1:Bli41pIlzTzf3KEY06n+xnzK/BESIg2ze4Pgfh/aI8c=
+golang.org/x/sys v0.0.0-20210315160823-c6e025ad8005/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20210320140829-1e4c9ba3b0c4/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20210330210617-4fbd30eecc44/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20210403161142-5e06dd20ab57 h1:F5Gozwx4I1xtr/sr/8CFbb57iKi3297KFs0QDbGN60A=
+golang.org/x/sys v0.0.0-20210403161142-5e06dd20ab57/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=
 golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
 golang.org/x/text v0.3.1-0.20180807135948-17ff2d5776d2/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
 golang.org/x/text v0.3.2/go.mod h1:bEr9sfX3Q8Zfm5fL9x+3itogRgK3+ptLWKqgva+5dAk=
-golang.org/x/text v0.3.3 h1:cokOdA+Jmi5PJGXLlLllQSgYigAEfHXJAERHVMaCc2k=
 golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
+golang.org/x/text v0.3.5/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
+golang.org/x/text v0.3.6 h1:aRYxNxv6iGQlyVaZmk6ZgYEDa+Jg18DxebPSrd6bg1M=
+golang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/time v0.0.0-20180412165947-fbb02b2291d2/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=
 golang.org/x/time v0.0.0-20181108054448-85acf8d2951c/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=
 golang.org/x/tools v0.0.0-20180828015842-6cd1fcedba52/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
@@ -261,6 +275,8 @@ golang.org/x/tools v0.0.0-20190311212946-11955173bddd/go.mod h1:LCzVGOaR6xXOjkQ3
 golang.org/x/tools v0.0.0-20190425150028-36563e24a262/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=
 golang.org/x/tools v0.0.0-20190524140312-2c0ae7006135/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=
 golang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
+golang.org/x/tools v0.0.0-20200130002326-2f3ba24bd6e7/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=
+golang.org/x/tools v0.1.0/go.mod h1:xkSsbof2nBLbhDlRMhhhyNLN/zl3eTqcnHD5viDpcZ0=
 golang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
 golang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
 golang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
@@ -279,8 +295,9 @@ google.golang.org/genproto v0.0.0-20181029155118-b69ba1387ce2/go.mod h1:JiN7NxoA
 google.golang.org/genproto v0.0.0-20181202183823-bd91e49a0898/go.mod h1:7Ep/1NZk928CDR8SjdVbjWNpdIf6nzjE3BTgJDr2Atg=
 google.golang.org/genproto v0.0.0-20190306203927-b5d61aea6440/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=
 google.golang.org/genproto v0.0.0-20190819201941-24fa4b261c55/go.mod h1:DMBHOl98Agz4BDEuKkezgsaosCRResVns1a3J2ZsMNc=
-google.golang.org/genproto v0.0.0-20200526211855-cb27e3aa2013 h1:+kGHl1aib/qcwaRi1CbqBZ1rk19r85MNUf8HaBghugY=
 google.golang.org/genproto v0.0.0-20200526211855-cb27e3aa2013/go.mod h1:NbSheEEYHJ7i3ixzK3sjbqSGDJWnxyFXZblF3eUsNvo=
+google.golang.org/genproto v0.0.0-20210406143921-e86de6bf7a46 h1:f4STrQZf8jaowsiUitigvrqMCCM4QJH1A2JCSI7U1ow=
+google.golang.org/genproto v0.0.0-20210406143921-e86de6bf7a46/go.mod h1:P3QM42oQyzQSnHPnZ/vqoCdDmzH28fzWByN9asMeM8A=
 google.golang.org/grpc v1.14.0/go.mod h1:yo6s7OP7yaDglbqo1J04qKzAhqBH6lvTonzMVmEdcZw=
 google.golang.org/grpc v1.16.0/go.mod h1:0JHn/cJsOMiMfNA9+DeHDlAU7KAAB5GDlYFpa9MZMio=
 google.golang.org/grpc v1.17.0/go.mod h1:6QZJwpn2B+Zp71q/5VxRsJ6NXXVCE5NRUHRo+f3cWCs=
@@ -312,8 +329,9 @@ gopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7/go.mod h1:dt/ZhP58zS4L8KSrWD
 gopkg.in/yaml.v2 v2.2.1/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
 gopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
 gopkg.in/yaml.v2 v2.2.4/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
-gopkg.in/yaml.v2 v2.3.0 h1:clyUAQHOM3G0M3f5vQj7LuJrETvjVot3Z5el9nffUtU=
 gopkg.in/yaml.v2 v2.3.0/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
+gopkg.in/yaml.v2 v2.4.0 h1:D8xgwECY7CYvx+Y2n4sBz93Jn9JRvxdiyyo8CTfuKaY=
+gopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=
 gopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
 gopkg.in/yaml.v3 v3.0.0-20200605160147-a5ece683394c h1:grhR+C34yXImVGp7EzNk+DTIk+323eIUWOmEevy6bDo=
 gopkg.in/yaml.v3 v3.0.0-20200605160147-a5ece683394c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
diff --git a/infra/conf/web.go b/infra/conf/web.go
new file mode 100644
index 0000000..8e19b57
--- /dev/null
+++ b/infra/conf/web.go
@@ -0,0 +1,66 @@
+package conf
+
+import (
+	"github.com/xtls/xray-core/app/web/config"
+)
+
+type WebConfig struct {
+	Tag    string          `json:"tag"`
+	Api    *ApiConfig      `json:"api"`
+	Pprof  bool            `json:"pprof"`
+	Static []*StaticConfig `json:"static"`
+}
+
+type ApiConfig struct {
+	Address string `json:"address"`
+	Port    uint32 `json:"port"`
+}
+
+type StaticConfig struct {
+	FilePath string `json:"filePath"`
+	Uri      string `json:"uri"`
+}
+
+func (c *StaticConfig) Build() (*config.Static, error) {
+	if c.FilePath == "" {
+		return nil, newError("could not serve nil filepath")
+	}
+
+	if c.Uri == "" {
+		return nil, newError("could not use void as uri")
+	}
+
+	return &config.Static{
+		FilePath: c.FilePath,
+		Uri:      c.Uri,
+	}, nil
+}
+
+func (c *WebConfig) Build() (*config.Config, error) {
+	if c.Tag == "" {
+		return nil, newError("Web tag can't be empty.")
+	}
+
+	if c.Api == nil {
+		c.Api = &ApiConfig{}
+	}
+
+	conf := &config.Config{
+		Tag: c.Tag,
+		Api: &config.Api{
+			Address: c.Api.Address,
+			Port:    c.Api.Port,
+		},
+		Pprof: c.Pprof,
+	}
+
+	for _, static := range c.Static {
+		s, err := static.Build()
+		if err != nil {
+			return nil, newError("failed to build http file server")
+		}
+		conf.Static = append(conf.Static, s)
+	}
+
+	return conf, nil
+}
diff --git a/infra/conf/xray.go b/infra/conf/xray.go
index 0b13979..4a7b3c7 100644
--- a/infra/conf/xray.go
+++ b/infra/conf/xray.go
@@ -397,6 +397,7 @@ type Config struct {
 	Transport       *TransportConfig       `json:"transport"`
 	Policy          *PolicyConfig          `json:"policy"`
 	API             *APIConfig             `json:"api"`
+	Web             *WebConfig             `json:"web"`
 	Stats           *StatsConfig           `json:"stats"`
 	Reverse         *ReverseConfig         `json:"reverse"`
 	FakeDNS         *FakeDNSConfig         `json:"fakeDns"`
@@ -446,6 +447,9 @@ func (c *Config) Override(o *Config, fn string) {
 	if o.API != nil {
 		c.API = o.API
 	}
+	if o.Web != nil {
+		c.Web = o.Web
+	}
 	if o.Stats != nil {
 		c.Stats = o.Stats
 	}
@@ -548,6 +552,14 @@ func (c *Config) Build() (*core.Config, error) {
 		config.App = append(config.App, serial.ToTypedMessage(apiConf))
 	}
 
+	if c.Web != nil {
+		WebConf, err := c.Web.Build()
+		if err != nil {
+			return nil, err
+		}
+		config.App = append(config.App, serial.ToTypedMessage(WebConf))
+	}
+
 	if c.Stats != nil {
 		statsConf, err := c.Stats.Build()
 		if err != nil {
diff --git a/main/distro/all/all.go b/main/distro/all/all.go
index 301987c..8a1788d 100644
--- a/main/distro/all/all.go
+++ b/main/distro/all/all.go
@@ -22,6 +22,7 @@ import (
 	_ "github.com/xtls/xray-core/app/reverse"
 	_ "github.com/xtls/xray-core/app/router"
 	_ "github.com/xtls/xray-core/app/stats"
+	_ "github.com/xtls/xray-core/app/web"
 
 	// Inbound and outbound proxies.
 	_ "github.com/xtls/xray-core/proxy/blackhole"
